<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEngine.XRModule</name>
    </assembly>
    <member name="T:UnityEngine.Experimental.XR.BoundedPlane">
      <summary>
        <para>Structure describing a bounded plane representing a real-world surface.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Alignment">
      <summary>
        <para>The alignment of the plane, e.g., horizontal or vertical.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Center">
      <summary>
        <para>Center point of the plane in world space.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.BoundedPlane.GetCorners(UnityEngine.Vector3&amp;,UnityEngine.Vector3&amp;,UnityEngine.Vector3&amp;,UnityEngine.Vector3&amp;)">
      <summary>
        <para>Outputs four points, in world space, representing the four corners of the plane. The corners are in clockwise order.</para>
      </summary>
      <param name="p0">The vertex of the first corner.</param>
      <param name="p1">The vertex of the second corner.</param>
      <param name="p2">The vertex of the third corner.</param>
      <param name="p3">The vertex of the fourth corner.</param>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Height">
      <summary>
        <para>Current height of the plane.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Id">
      <summary>
        <para>A session-unique identifier for the plane.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Normal">
      <summary>
        <para>Normal vector of the plane in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Plane">
      <summary>
        <para>Returns the infinite Plane associated with this BoundedPlane.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Position">
      <summary>
        <para>Position of the plane in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Rotation">
      <summary>
        <para>Orientation of the plane in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Size">
      <summary>
        <para>Current size of the plane.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.BoundedPlane.TryGetBoundary(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Try to retrieve a list of positions in world space describing current plane boundary.</para>
      </summary>
      <param name="boundaryOut">A list of vertices representing the boundary.</param>
      <returns>
        <para>True if the plane exists (i.e., is still being tracked), otherwise false.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Width">
      <summary>
        <para>Current width of the plane.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.PlaneAddedEventArgs">
      <summary>
        <para>Contains data supplied to a XRPlane.PlaneAdded event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PlaneAddedEventArgs.AddedPlane">
      <summary>
        <para>The BoundedPlane that was added.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PlaneAddedEventArgs.XRPlane">
      <summary>
        <para>A reference to the XRPlane object from which the event originated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.PlaneAlignment">
      <summary>
        <para>Describes current plane alignment in mixed reality space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.PlaneAlignment.Horizontal">
      <summary>
        <para>Plane has horizontal alignment.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.PlaneAlignment.NonAxis">
      <summary>
        <para>Plane is not alligned along cardinal (X, Y or Z) axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.PlaneAlignment.Vertical">
      <summary>
        <para>Plane has vertical alignment.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.PlaneRemovedEventArgs">
      <summary>
        <para>Contains data supplied to a XRPlane.PlaneRemoved event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PlaneRemovedEventArgs.RemovedPlane">
      <summary>
        <para>The BoundedPlane that was removed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PlaneRemovedEventArgs.SubsumedByPlane">
      <summary>
        <para>The BoundedPlane that subsumed the removed plane.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PlaneRemovedEventArgs.XRPlane">
      <summary>
        <para>A reference to the XRPlane object from which the event originated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.PlaneUpdatedEventArgs">
      <summary>
        <para>Contains data supplied to a XRPlane.PlaneUpdated event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PlaneUpdatedEventArgs.UpdatedPlane">
      <summary>
        <para>The BoundedPlane that was updated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PlaneUpdatedEventArgs.XRPlane">
      <summary>
        <para>A reference to the XRPlane object from which the event originated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.PointCloudUpdatedEventArgs">
      <summary>
        <para>Contains data supplied to a XRDepth.PointCloudUpdated event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PointCloudUpdatedEventArgs.XRDepth">
      <summary>
        <para>A reference to the XRDepth object from which the event originated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.ReferencePoint">
      <summary>
        <para>Describes the transform data of a real-world point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.ReferencePoint.Id">
      <summary>
        <para>ID for the reference point that is unique across the session.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.ReferencePoint.Position">
      <summary>
        <para>Respond to changes in this position to correct for changes in the device's understanding of where this point is in the real world.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.ReferencePoint.Rotation">
      <summary>
        <para>Respond to changes in this rotation to correct for changes in the device's understanding of where this point is in the real world.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs">
      <summary>
        <para>Data to be passed to the user when the device corrects its understanding of the world enough that the ReferencePoint's position or rotation has changed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs.UpdatedReferencePoint">
      <summary>
        <para>The reference point that has the value of its position, rotation, or both changed enough through the device correcting its understanding of where this point should be located in Unity space.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.SessionConfiguration">
      <summary>
        <para>Struct defines sets of parameters used when connecting to a session.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.SessionConfiguration.EnableCamera">
      <summary>
        <para>True if the device's camera should be enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.SessionConfiguration.EnableDepthData">
      <summary>
        <para>True if depth data should be enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.SessionConfiguration.EnableLightEstimation">
      <summary>
        <para>True if light estimation should be enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.SessionConfiguration.EnablePlaneDetection">
      <summary>
        <para>True if plane detection should be enabled.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.TrackableId">
      <summary>
        <para>A session-unique identifier for trackables in the environment, e.g., planes and feature points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.TrackableId.InvalidId">
      <summary>
        <para>Represents an invalid id.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.TrackableId.ToString">
      <summary>
        <para>Generates a nicely formatted version of the id.</para>
      </summary>
      <returns>
        <para>A string unique to this id</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.XR.TrackableType">
      <summary>
        <para>A trackable is feature in the physical environment that a device is able to track, such as a plane.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.All">
      <summary>
        <para>All trackables (planes and point cloud)</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.FeaturePoint">
      <summary>
        <para>A feature point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.None">
      <summary>
        <para>No trackable.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.PlaneEstimated">
      <summary>
        <para>An estimated plane.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.Planes">
      <summary>
        <para>Any of the plane types.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.PlaneWithinBounds">
      <summary>
        <para>Within the BoundedPlane.Size of a BoundedPlane</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.PlaneWithinInfinity">
      <summary>
        <para>The infinite plane of a BoundedPlane</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.PlaneWithinPolygon">
      <summary>
        <para>The boundary of a BoundedPlane</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.TrackingState">
      <summary>
        <para>Current tracking state of the device.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackingState.Aborted">
      <summary>
        <para>Tracking was aborted.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackingState.Initializing">
      <summary>
        <para>Tracking is initializing.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackingState.Suspended">
      <summary>
        <para>Tracking was suspended.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackingState.Tracking">
      <summary>
        <para>Tracking is currently working.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackingState.Unknown">
      <summary>
        <para>Unidentified tracking status.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRCameraInstance">
      <summary>
        <para>Provides access to a device's camera.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRCameraInstance.GetAverageBrightness">
      <summary>
        <para>Provides brightness for the whole image as an average of all pixels' brightness.</para>
      </summary>
      <returns>
        <para>An estimated average brightness for the environment.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRCameraInstance.GetAverageColorTemperature">
      <summary>
        <para>Provides color temperature for the whole image as an average of all pixels' color temperature.</para>
      </summary>
      <returns>
        <para>An estimated color temperature.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRCameraInstance.SetMaterial(UnityEngine.Material)">
      <summary>
        <para>Set current Material to be used while rendering to the render target.</para>
      </summary>
      <param name="mat">The Material to use.</param>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRCameraSubsystemDescriptor">
      <summary>
        <para>Class providing information about  XRCameraSubsystem registration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRCameraSubsystemDescriptor.ProvidesAverageBrightness">
      <summary>
        <para>Specifies if current subsystem is allowed to provide average brightness.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRCameraSubsystemDescriptor.ProvidesAverageColorTemperature">
      <summary>
        <para>Specifies if current subsystem is allowed to provide average camera temperature.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRDepth">
      <summary>
        <para>Provides access to depth measurements of the environment in the form of a point cloud.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRDepth.FrameOfLastPointCloudUpdate">
      <summary>
        <para>The frame during which the point cloud was last updated.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRDepth.GetPointCloudConfidence(System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Retrieves the confidence values for each point in the point cloud.</para>
      </summary>
      <param name="confidenceOut">A list of floats containing all confidence values for the point cloud.</param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRDepth.GetPointCloudPoints(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Retrieves the point cloud points.</para>
      </summary>
      <param name="pointsOut">A list of Vector3s containing all points in the point cloud.</param>
    </member>
    <member name="?:UnityEngine.Experimental.XR.XRDepth.PointCloudUpdated(System.Action`1&lt;UnityEngine.Experimental.XR.PointCloudUpdatedEventArgs&gt;)">
      <summary>
        <para>Raised once during each frame in which the point cloud is updated.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRDepth.TryGetPoint(UnityEngine.Experimental.XR.TrackableId,UnityEngine.Vector3&amp;)">
      <summary>
        <para>Attempt to retrieve the position of a point cloud point by id.</para>
      </summary>
      <param name="pointId">The TrackableId of the point cloud point to get.</param>
      <param name="point">The position of the point cloud point.</param>
      <returns>
        <para>True if the point exists (i.e., is being tracked). False otherwise.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRDepth.Valid">
      <summary>
        <para>If true, the XREnvironment object that owns this XRDepth object is still alive. If false, calls made on this XRDepth object will result in ArgumentNullExceptions getting thrown.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRDepth.XREnvironment">
      <summary>
        <para>Returns the XREnvironment object that this XRDepth object was retrieved from.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XREnvironment">
      <summary>
        <para>Entry-point for reasoning about the physical world in an AR game or app.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XREnvironment.Depth">
      <summary>
        <para>Returns the environment's XRDepth object, which allows for interfacing with point clouds ("feature points") from the physical world.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XREnvironment.Planes">
      <summary>
        <para>Returns the environment's XRPlanes object, which allows for interfacing with planes that the platform has identified from the physical world.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XREnvironment.Raycast">
      <summary>
        <para>Returns the environment's XRRaycast object, which allows for simplified raycasting into the physical world against known constructs (currently feature points and planes).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XREnvironment.ReferencePoints">
      <summary>
        <para>Returns the environment's XRReferencePoints object, which allows for defining points of interest for which you can respond to updates concerning their transforms to further stabilize your virtual objects with the physical world.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XREnvironment.Session">
      <summary>
        <para>Returns the environment's XRSession object, which allows for more global control of AR functionality.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XREnvironmentSubsystemDescriptor">
      <summary>
        <para>Class providing information about XREnvironment registration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XREnvironmentSubsystemDescriptor.SupportsFeaturePoints">
      <summary>
        <para>When true, XRDepth will provide list of feature points detected so far.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XREnvironmentSubsystemDescriptor.SupportsLightEstimation">
      <summary>
        <para>When true, the XRCameraInstance can be queried for light estimates of the physical environment.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XREnvironmentSubsystemDescriptor.SupportsPlaneFinding">
      <summary>
        <para>When true, XRPlanes will provide functionality to access all planes detected so far as well as respond to events associated with planes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XREnvironmentSubsystemDescriptor.SupportsReferencePoints">
      <summary>
        <para>When true, XRReferencePoints supports tracking real-world points in the form of ReferencePoints, which the device can track and correct its understanding of.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRInputInstance">
      <summary>
        <para>XRInputInstance is used to enable and disable the inputs coming from a specific plugin.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRInputSubsystemDescriptor">
      <summary>
        <para>Information about an Input subsystem.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRInstance">
      <summary>
        <para>An XRInstance is initialized from an XRSubsystemDescriptor for a given XRSubsystem (Example, Input, Environment, Display, etc.) and provides an interface to interact with that given Subsystem until it is Destroyed.  After an XRInstance is created it can be Started or Stopped to turn on and off functionality (and preserve performance).  The base type for XRInstance only exposes this functionality; this class is designed to be a base class for derived classes that expose more functionality specific to a given Subsystem.

            Note: initializing a second XRInstance from the same XRSubsystemDescriptor will return a reference to the existing XRInstance as only one XRInstance is currently allowed for a single Subsystem provider.
            </para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRInstance.Destroy">
      <summary>
        <para>Destroys this instance of a subsystem.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRInstance.Start">
      <summary>
        <para>Starts an instance of a subsystem.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRInstance.Stop">
      <summary>
        <para>Stops an instance of a subsystem.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRPlane">
      <summary>
        <para>Provides methods, events, and properties that provides information about planes detected in the environment. </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRPlane.FrameOfLastPlaneUpdate">
      <summary>
        <para>The frame during which the planes were last updated.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRPlane.GetAllPlanes(System.Collections.Generic.List`1&lt;UnityEngine.Experimental.XR.BoundedPlane&gt;)">
      <summary>
        <para>Get all the BoundedPlanes currently tracked by the system.</para>
      </summary>
      <param name="planesOut">A list of BoundedPlanes containing all planes currently tracked by the system.</param>
    </member>
    <member name="?:UnityEngine.Experimental.XR.XRPlane.PlaneAdded(System.Action`1&lt;UnityEngine.Experimental.XR.PlaneAddedEventArgs&gt;)">
      <summary>
        <para>Raised for each BoundedPlane that has been added in the current frame.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.Experimental.XR.XRPlane.PlaneRemoved(System.Action`1&lt;UnityEngine.Experimental.XR.PlaneRemovedEventArgs&gt;)">
      <summary>
        <para>Raised for each BoundedPlane that has been removed in the current frame.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.Experimental.XR.XRPlane.PlaneUpdated(System.Action`1&lt;UnityEngine.Experimental.XR.PlaneUpdatedEventArgs&gt;)">
      <summary>
        <para>Raised for each plane that has been updated in the current frame.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRPlane.TryGetPlane(UnityEngine.Experimental.XR.TrackableId,UnityEngine.Experimental.XR.BoundedPlane&amp;)">
      <summary>
        <para>Get a BoundedPlane by TrackableId</para>
      </summary>
      <param name="planeId">The session-unique TrackableId of the plane to get.</param>
      <param name="plane">The BoundedPlane with the supplied planeId</param>
      <returns>
        <para>True if the BoundedPlane with planeId exists, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRPlane.TryGetPlaneBoundary(UnityEngine.Experimental.XR.TrackableId,System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Try to retrieve a list of positions in world space describing the current plane boundary.</para>
      </summary>
      <param name="planeId">The session-unique TrackableId of the plane.</param>
      <param name="boundaryOut">A list of vertices representing the plane's boundary.</param>
      <returns>
        <para>True if the plane exists (i.e., is still being tracked), otherwise false.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRPlane.Valid">
      <summary>
        <para>If true, the XREnvironment object that owns this XRPlanes object is still alive. If false, calls made on this XRPlanes object will result in ArgumentNullExceptions getting thrown.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRPlane.XREnvironment">
      <summary>
        <para>Returns the XREnvironment object that this XRPlane object was retrieved from.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRRaycast">
      <summary>
        <para>Provides methods and properties that allow for querying portions of the physical environment that are near a provided specified ray. These trackables include planes and depth data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRRaycast.Environment">
      <summary>
        <para>Returns the XREnvironment object that this XRRaycast object was retrieved from.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRRaycast.Raycast(UnityEngine.Ray,System.Collections.Generic.List`1&lt;UnityEngine.Experimental.XR.XRRaycastHit&gt;,UnityEngine.Experimental.XR.TrackableType)">
      <summary>
        <para>Casts a ray using ray against selected trackables (e.g., planes and feature points).</para>
      </summary>
      <param name="ray">The Ray to use.</param>
      <param name="hitResults">The resulting list of XRRaycastHit.</param>
      <param name="trackableTypeMask">An optional mask of TrackableType to raycast against.</param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRRaycast.Raycast(UnityEngine.Vector3,System.Collections.Generic.List`1&lt;UnityEngine.Experimental.XR.XRRaycastHit&gt;,UnityEngine.Experimental.XR.TrackableType)">
      <summary>
        <para>Casts a ray from a screen point against selected trackables (e.g., planes and feature points).</para>
      </summary>
      <param name="screenPoint">The screen point from which to cast.</param>
      <param name="hitResults">The resulting list of XRRaycastHit.</param>
      <param name="trackableTypeMask">An optional mask of TrackableType to raycast against.</param>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRRaycast.RaycastAngle">
      <summary>
        <para>Get or set the angle, in degrees, to use during point cloud raycasts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRRaycast.Valid">
      <summary>
        <para>If true, the XREnvironment object that owns this XRRaycast object is still alive. If false, calls made on this XRRaycast object will result in ArgumentNullExceptions getting thrown.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRRaycastHit">
      <summary>
        <para>Structure describing the result of a XREnvironment.Raycast hit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRRaycastHit.Distance">
      <summary>
        <para>The distance, in meters, between the Ray origin and the hit's XRRaycastHit.Position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRRaycastHit.HitType">
      <summary>
        <para>The TrackableType(s) that were hit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRRaycastHit.Position">
      <summary>
        <para>The position of the hit result in world space where the Ray hit the trackable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRRaycastHit.Rotation">
      <summary>
        <para>The orientation of the hit result in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRRaycastHit.TrackableId">
      <summary>
        <para>The TrackableId of the trackable that was hit by the raycast.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRReferencePoint">
      <summary>
        <para>Provides methods and properties that allow for querying, creating, and removing of reference points. These reference points are cues to the XREnvironment that indicate areas of interest in the environment which helps assure that tracking of these points remains accurate.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRReferencePoint.FrameOfLastReferencePointUpdate">
      <summary>
        <para>The frame during which the reference points were last updated.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRReferencePoint.GetAllReferencePoints(System.Collections.Generic.List`1&lt;UnityEngine.Experimental.XR.ReferencePoint&gt;)">
      <summary>
        <para>Retrieves all ReferencePoints added by calls to XRReferencePoint.TryAddReferencePoint.</para>
      </summary>
      <param name="referencePointsOut">A list of ReferencePoints containing all reference points.</param>
    </member>
    <member name="?:UnityEngine.Experimental.XR.XRReferencePoint.ReferencePointUpdated(System.Action`1&lt;UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs&gt;)">
      <summary>
        <para>Raised each frame for each ReferencePoint that had the values of its position, rotation, or both changed enough by the device correcting its understanding of where the point should be located in Unity space.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRReferencePoint.TryAddReferencePoint(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Experimental.XR.TrackableId&amp;)">
      <summary>
        <para>Attempt to add a ReferencePoint that gets tracked by the device.</para>
      </summary>
      <param name="position">Current position, in world space, of a point you want the device to track.</param>
      <param name="rotation">Current rotation, in world space, of a point you want the device to track.</param>
      <param name="referencePointId">If this method returns true, this is filled out with the ID (unique to the session) of the point.</param>
      <returns>
        <para>If the ReferencePoint was added successfully, this method returns true. Otherwise, it returns false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRReferencePoint.TryGetReferencePoint(UnityEngine.Experimental.XR.TrackableId,UnityEngine.Experimental.XR.ReferencePoint&amp;)">
      <summary>
        <para>Attempt to retrieve a ReferencePoint.</para>
      </summary>
      <param name="referencePointId">The ID of the ReferencePoint that TryAddReferencePoint filled out when you added this point.</param>
      <param name="referencePoint">The ReferencePoint to be filled out that matches the ID passed in.</param>
      <returns>
        <para>If the ReferencePoint was found and filled out successfully, this method returns true. Otherwise, it return false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRReferencePoint.TryRemoveReferencePoint(UnityEngine.Experimental.XR.TrackableId)">
      <summary>
        <para>Attempt to remove a ReferencePoint getting tracked by the device.</para>
      </summary>
      <param name="referencePointId">ID of the ReferencePoint you wish to remove so the device no longer tries to track it.</param>
      <returns>
        <para>If the ReferencePoint was removed successfully, this method returns true. Otherwise, it returns false.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRReferencePoint.Valid">
      <summary>
        <para>If true, the XREnvironment object that owns this XRReferencePoints object is still alive. If false, calls made on this XRReferencePoints object will result in ArgumentNullExceptions getting thrown.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRReferencePoint.XREnvironment">
      <summary>
        <para>Returns the XREnvironment object that this XRReferencePoint object was retrieved from.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRSession">
      <summary>
        <para>A collection of methods and properties used to interact with and configure an AR session.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRSession.Environment">
      <summary>
        <para>Returns the XREnvironment object that this XRSession object was retrieved from.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRSession.FrameOfLastTrackingStateUpdate">
      <summary>
        <para>The frame during which the tracking state was last updated.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRSession.SetConfig(UnityEngine.Experimental.XR.SessionConfiguration)">
      <summary>
        <para>Sets the AR session configuration to be used when the Environment subsystem starts.</para>
      </summary>
      <param name="config"></param>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRSession.TrackingState">
      <summary>
        <para>Get current tracking status of the device.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRSession.Valid">
      <summary>
        <para>If true, the XREnvironment object that owns this XRSession object is still alive. If false, calls made on this XRSession object will result in ArgumentNullExceptions getting thrown.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRSubsystemDescriptor`1">
      <summary>
        <para>Information about a subsystem that can be queried before creating a subsystem instance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRSubsystemDescriptor_1.Create">
      <summary>
        <para>Creates an XRInstance from this descriptor.</para>
      </summary>
      <returns>
        <para>Instance of subsystem.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRSubsystemManager">
      <summary>
        <para>Gives access to XR related subsystems which provide XR functionality.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRSubsystemManager.GetInstances(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Returns active XRInstances of a specific instance type.</para>
      </summary>
      <param name="instances">Active instances.</param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRSubsystemManager.GetSubsystemDescriptors(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Returns a list of descriptors which describe XR related functionality that can be enabled.</para>
      </summary>
      <param name="descriptors">Subsystem specific descriptors.</param>
    </member>
  </members>
</doc>
